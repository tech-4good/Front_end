name: CI/CD para Front-End na EC2 pública

on:
  push:
    branches:
      - main # O branch que acionará o deploy
      - proxy # Outro branch que também acionará o deploy

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do código
      - name: Checkout do Repositório
        uses: actions/checkout@v4

      # 2. Configuração do ambiente Node
      - name: FE - Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'
          
      # 3. Build da aplicação (Se for uma aplicação que precisa ser construída, ex: React, Angular, Vue)
      - name: FE - Instalar Dependências e Fazer Build
        run: |
             npm install
             npm run build --if-present 
             # Se sua app não precisar de build, remova esta etapa
        working-directory: ./front-end

      # 4. Deploy para Web1
      - name: FE - Deploy dist para Web1
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.WEB1_HOST }}
          REMOTE_USER: ubuntu
          TARGET: /home/ubuntu/frontend
          ARGS: "-rltgoDzvO --delete --exclude=nginx/" 
          SOURCE: "./front-end/dist/"

      # 4.1 Deploy template nginx para Web1
      - name: FE - Deploy template nginx para Web1
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.WEB1_HOST }}
          REMOTE_USER: ubuntu
          TARGET: /home/ubuntu/frontend/nginx/templates/
          ARGS: "-rltgoDzvO" 
          SOURCE: "./front-end/nginx/templates/"

      # 5. Deploy para Web2
      - name: FE - Deploy dist para Web2
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.WEB2_HOST }}
          REMOTE_USER: ubuntu
          TARGET: /home/ubuntu/frontend
          ARGS: "-rltgoDzvO --delete --exclude=nginx/" 
          SOURCE: "./front-end/dist/"

      # 5.1 Deploy template nginx para Web2
      - name: FE - Deploy template nginx para Web2
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.WEB2_HOST }}
          REMOTE_USER: ubuntu
          TARGET: /home/ubuntu/frontend/nginx/templates/
          ARGS: "-rltgoDzvO" 
          SOURCE: "./front-end/nginx/templates/"

      # 6. Atualizar IP privado da API e reiniciar Nginx na Web1
      - name: FE - Atualizar IP da API e reiniciar Nginx na Web1
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.WEB1_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            export IP_PORTA_API=${{ secrets.REMOTE_HOST_PRIVADO }}:8080
            echo "Variável de IP e porta da API criada: $IP_PORTA_API"
            
            envsubst '${IP_PORTA_API}' < /home/ubuntu/frontend/nginx/templates/default.conf.template > /home/ubuntu/frontend/nginx/conf.d/default.conf
            echo "Arquivo default.conf do nginx criado com variável: $IP_PORTA_API"

            docker compose -f /home/ubuntu/compose.yaml down
            echo "Docker compose do Nginx parado"
            
            docker compose -f /home/ubuntu/compose.yaml up -d --build
            echo "Docker compose do Nginx reiniciado"

      # 7. Atualizar IP privado da API e reiniciar Nginx na Web2
      - name: FE - Atualizar IP da API e reiniciar Nginx na Web2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.WEB2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            export IP_PORTA_API=${{ secrets.REMOTE_HOST_PRIVADO }}:8080
            echo "Variável de IP e porta da API criada: $IP_PORTA_API"
            
            envsubst '${IP_PORTA_API}' < /home/ubuntu/frontend/nginx/templates/default.conf.template > /home/ubuntu/frontend/nginx/conf.d/default.conf
            echo "Arquivo default.conf do nginx criado com variável: $IP_PORTA_API"

            docker compose -f /home/ubuntu/compose.yaml down
            echo "Docker compose do Nginx parado"
            
            docker compose -f /home/ubuntu/compose.yaml up -d --build
            echo "Docker compose do Nginx reiniciado" 

